import { parseString } from 'xml2js';
import XMLModel from '../models/Xml.js';
import ClientModel from '../models/Client.js';
import { XMLParser } from "fast-xml-parser";

import TelegramBot from 'node-telegram-bot-api';
import dotenv from 'dotenv';

dotenv.config();


const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID; // ID –∫–∞–Ω–∞–ª–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890
const bot = new TelegramBot(TOKEN, { polling: true });
console.log('TOKEN:', CHANNEL_ID);

bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    bot.getChat('@adb_solution_news').then(chat => {
        console.log(chat.id);
      });
      

    if (text === '/start') {
        bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç!');
    } else {
        bot.sendMessage(chatId, `–¢—ã —Å–∫–∞–∑–∞–ª: ${text}`);
    }
});

function sendMessageToUser(chatId, message) {
    bot.sendMessage(chatId, message);
}

export async function sendMessageToChannel({ title, text, url }) {
  const shortText = text?.slice(0, 500)?.trim();
  const message = `üì∞ *${title}*\n\n${shortText || '_–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞_'}\n\n[–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ](${url})`;

  try {
    await bot.sendMessage(CHANNEL_ID, message, { parse_mode: 'Markdown' });
    return true;
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª:', err);
    return false;
  }
}

  

// app.post('/send-message', (req, res) => {
//     const { message } = req.body;
//     if (!message) {
//         return res.status(400).json({ error: 'Message is required' });
//     }
//     sendMessageToChannel(message);
//     res.json({ success: true, message: 'Message sent to channel' });
// });

export const messageToChannel = async (req, res) => {
    try {
      const { message } = req.body; // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
  
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (!message) {
        return res.status(400).json({ error: 'Message is required' });
      }
  
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ sendMessageToChannel ‚Äî –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      const result = await sendMessageToChannel(message);
  
      // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      if (result) {
        res.status(200).json({ success: true, message: 'Message sent to channel' });
      } else {
        res.status(500).json({ error: 'Failed to send message to channel' });
      }
    } catch (error) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
      res.status(500).json({
        message: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å.",
        error: error.message,
      });
    }
  };
  





